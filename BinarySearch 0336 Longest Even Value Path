#include <iostream>
#include <algorithm>

struct TreeNode {
    int val;
    TreeNode* left;
    TreeNode* right;
    TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
};

class Solution {
public:
    int solve(TreeNode* root) {
        int ans = 0;
        std::function<std::pair<int, int>(TreeNode*)> dfs = [&](TreeNode* node) -> std::pair<int, int> {
            if (!node) return {0, 0};

            auto [l1, r1] = dfs(node->left);
            auto [l2, r2] = dfs(node->right);

            if (node->val % 2 == 1) {
                return {0, 0};
            } else {
                int l = std::max(l1, r1) + 1;
                int r = std::max(l2, r2) + 1;
                ans = std::max(ans, l + r - 1);
                return {l, r};
            }
        };

        dfs(root);
        return ans;
    }
};

// Helper function to create a tree from a vector of values
TreeNode* createTree(const std::vector<int>& values) {
    if (values.empty()) return nullptr;
    std::vector<TreeNode*> nodes(values.size(), nullptr);
    for (size_t i = 0; i < values.size(); ++i) {
        if (values[i] != -1) {
            nodes[i] = new TreeNode(values[i]);
        }
    }
    for (size_t i = 0; i < values.size(); ++i) {
        if (nodes[i]) {
            if (2 * i + 1 < values.size()) nodes[i]->left = nodes[2 * i + 1];
            if (2 * i + 2 < values.size()) nodes[i]->right = nodes[2 * i + 2];
        }
    }
    return nodes[0];
}

// Helper function to clean up the allocated memory
void deleteTree(TreeNode* root) {
    if (!root) return;
    deleteTree(root->left);
    deleteTree(root->right);
    delete root;
}

int main() {
    Solution solution;

    // Example tree creation
    TreeNode* root = createTree({2, 4, 6, 8, 10, 12, 14});
    
    int result = solution.solve(root);
    std::cout << "Longest even-valued path diameter: " << result << std::endl;

    // Clean up allocated memory
    deleteTree(root);

    return 0;
}
