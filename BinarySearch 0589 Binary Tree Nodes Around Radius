class Solution {
public:
    unordered_map<int, vector<int>> G;
    vector<int> ans;
    unordered_set<int> V;

    void dfs(TreeNode* node, TreeNode* par) {
        if (par != nullptr) {
            G[node->val].push_back(par->val);
            G[par->val].push_back(node->val);
        }
        if (node->left) dfs(node->left, node);
        if (node->right) dfs(node->right, node);
    }

    void dfs2(int node, int d, int radius) {
        if (d == radius) {
            ans.push_back(node);
            return;
        }
        V.insert(node);
        for (int child : G[node]) {
            if (V.find(child) != V.end()) continue;
            dfs2(child, d + 1, radius);
        }
    }

    vector<int> solve(TreeNode* root, int target, int radius) {
        dfs(root, nullptr);
        dfs2(target, 0, radius);
        sort(ans.begin(), ans.end());
        return ans;
    }
};
