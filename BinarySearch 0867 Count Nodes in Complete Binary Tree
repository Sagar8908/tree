#include <iostream>
#include <bitset>

// Definition for a binary tree node
struct TreeNode {
    int val;
    TreeNode *left;
    TreeNode *right;
    TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
};

class Solution {
public:
    int solve(TreeNode* root) {
        if (!root) return 0;

        TreeNode* left = root;
        int depth = 0;
        
        // Find the depth of the leftmost node
        while (left->left) {
            left = left->left;
            depth++;
        }

        int begin = 1 << depth;
        int end = (1 << (depth + 1)) - 1;

        // Check if the path for 'end' exists
        if (Path(root, end)) return end;

        // Binary search to find the largest index with a valid path
        while (begin + 1 < end) {
            int mid = (begin + end) / 2;
            if (Path(root, mid)) {
                begin = mid;
            } else {
                end = mid;
            }
        }

        return begin;
    }

private:
    bool Path(TreeNode* root, int num) {
        std::bitset<32> bits(num);
        for (int i = bits.size() - 1; i >= 0; --i) {
            if (bits[i]) {
                root = root->right;
            } else {
                root = root->left;
            }
            if (!root) return false;
        }
        return true;
    }
};
