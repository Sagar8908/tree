#include <iostream>
#include <vector>
#include <unordered_map>
#include <unordered_set>
#include <algorithm>

using namespace std;

class Solution {
public:
    int solve(vector<vector<int>>& edges) {
        // Build the graph
        unordered_map<int, vector<int>> G;
        for (const auto& edge : edges) {
            G[edge[0]].push_back(edge[1]);
            G[edge[1]].push_back(edge[0]);
        }

        unordered_set<int> visited;
        int res = 0;

        // Depth-first search (DFS) to find the diameter
        function<int(int)> dfs = [&](int node) {
            visited.insert(node);
            vector<int> maxs = {-1, -1};
            for (int neighbor : G[node]) {
                if (visited.count(neighbor)) continue;
                int depth = dfs(neighbor);
                maxs.push_back(depth);
                sort(maxs.rbegin(), maxs.rend());
                maxs.pop_back();
            }
            res = max(res, maxs[0] + maxs[1] + 2);
            return maxs[0] + 1;
        };

        dfs(1);
        return res + 1;
    }
};
